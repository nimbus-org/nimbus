/*
 * This software is distributed under following license based on modified BSD
 * style license.
 * ----------------------------------------------------------------------
 *
 * Copyright 2003 The Nimbus Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NIMBUS PROJECT ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE NIMBUS PROJECT OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are
 * those of the authors and should not be interpreted as representing official
 * policies, either expressed or implied, of the Nimbus Project.
 */
package jp.ossc.nimbus.service.aop;

import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.util.Locale;

@START<SERVLET_API6@
import javax.servlet.ServletResponse;
import javax.servlet.ServletOutputStream;
@END<SERVLET_API6@
@START>=SERVLET_API6@
import jakarta.servlet.ServletResponse;
import jakarta.servlet.WriteListener;
import jakarta.servlet.ServletOutputStream;
@END>=SERVLET_API6@

public class DummyServletResponse implements ServletResponse{

    protected String characterEncoding = "ISO-8859-1";
    protected String contentType;
    protected int contentLength;
    protected int bufferSize;
    protected boolean isCommitted;
    protected Locale locale;
    protected PipedServletOutputStream os;
    protected PrintWriter pw;
    protected BufferedReader br;

    public String getCharacterEncoding(){
        return characterEncoding;
    }
    public void setCharacterEncoding(String charset){
        characterEncoding = charset;
    }
    public ServletOutputStream getOutputStream() throws IOException{
        if(os == null){
            os = new PipedServletOutputStream();
        }
        return os;
    }
    public PrintWriter getWriter() throws IOException{
        if(pw == null){
            pw = new PrintWriter(new OutputStreamWriter(getOutputStream(), characterEncoding));
        }
        return pw;
    }
    public BufferedReader getReader() throws IOException{
        if(br == null){
            br = new BufferedReader(
                new InputStreamReader(
                    new PipedInputStream(
                        ((PipedServletOutputStream)getOutputStream())
                            .getPipedOutputStream()
                    ),
                    characterEncoding
                )
            );
        }
        return br;
    }
    public void setContentLength(int len){
        contentLength = len;
    }
    public void setContentType(String type){
        contentType = type;
    }
    public String getContentType(){
        return contentType;
    }
    public void setBufferSize(int size){
        bufferSize = size;
    }
    public int getBufferSize(){
        return bufferSize;
    }
    public void flushBuffer() throws IOException{
    }
    public void resetBuffer(){
    }
    public boolean isCommitted(){
        return isCommitted;
    }
    public void setCommitted(boolean flg){
        isCommitted = flg;
    }
    public void reset(){
    }
    public void setLocale(Locale loc){
        locale = loc;
    }
    public Locale getLocale(){
        return locale;
    }

    protected class PipedServletOutputStream extends ServletOutputStream{
        protected PipedOutputStream pos = new PipedOutputStream();

        public PipedOutputStream getPipedOutputStream(){
            return pos;
        }

        public void write(int b) throws IOException{
            pos.write(b);
            contentLength++;
        }
        public void flush() throws IOException{
            pos.flush();
        }
        public void close() throws IOException{
            pos.close();
        }

@START>=SERVLET_API6@
        @Override
        public boolean isReady() {
            // TODO 自動生成されたメソッド・スタブ
            return false;
        }

        @Override
        public void setWriteListener(WriteListener writeListener) {
            // TODO 自動生成されたメソッド・スタブ

        }
@END>=SERVLET_API6@
    }

@START>=SERVLET_API6@
    @Override
    public void setContentLengthLong(long len) {
        // TODO 自動生成されたメソッド・スタブ

    }
@END>=SERVLET_API6@
}
